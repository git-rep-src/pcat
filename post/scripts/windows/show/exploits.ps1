$ProgressPreference = "SilentlyContinue"
$OuputEncoding = [Text.UTF8Encoding]::UTF8
$global:BUF = ""
$RET = ""
$PSV = ([int]$PsVersionTable.PsVersion.Major) 
$CAPTION = ""
$BUILD = ""
$SP = ""
[bool] $CONTINUE = $TRUE
function xml()
{
    if ($args[0] -eq "OPEN") {
        $global:BUF += "<" + $args[1] + ">"
    } elseif ($args[0] -eq "CLOSE") {
        $global:BUF += "</" + $args[1] + ">"
    } else {
        $global:BUF += "<" + $args[0] + ">" + $args[1] + "</" + $args[0] + ">"
    }
}
xml "OPEN" "DATA name='exploits' maxlen='7'"
if ($PSV -ne "" -and $PSV -ne $null -and $PSV -gt 2 -and $? -eq "True") {
    xml "OPEN" "KERNEL"
    xml "OS" "WINDOWS"
    $RET = ((Get-CimInstance Win32_OperatingSystem).Caption)
    if ($RET -ne "" -and $RET -ne $null -and $? -eq "True") {
        if ($RET -like "*Windows 8*") {
            $CAPTION = "8"
        } elseif ($RET -like "*Windows 8.1*") {
            $CAPTION = "8.1"
        } elseif ($RET -like "*Windows 10*") {
            $CAPTION = "10"
        } elseif ($RET -like "*Windows Server 2012*") {
            $CAPTION = "server2012"
        } elseif ($RET -like "*Windows Server 2012 R2*") {
            $CAPTION = "server2012r2"
        } elseif ($RET -like "*Windows Server 2016*") {
            $CAPTION = "server2016"
        } elseif ($RET -like "*Windows Server 2019*") {
            $CAPTION = "server2019"
        } else {
            $CONTINUE = $FALSE
        }
        if ($CONTINUE) {
            $RET = ((Get-CimInstance Win32_OperatingSystem).BuildNumber)
            if ($RET -ne $null -and $? -eq "True") {
                if ($RET -eq "") {
                    $BUILD = "*"
                } else {
                    $BUILD = $RET
                }
            } else {
                $CONTINUE = $FALSE
            }
        }
        if ($CONTINUE) {
            $RET = ((Get-CimInstance Win32_OperatingSystem).ServicePackMajorVersion)
            if ($RET -ne $null -and $? -eq "True") {
                if ($RET -eq "") {
                    $SP = "*"
                } else {
                    $SP = $RET
                }
            } else {
                $CONTINUE = $FALSE
            }
        }
        if ($CONTINUE) {
            $RET = $CAPTION + ":" + $BUILD + ":" + $SP
            xml "VERSION" $RET
        } else {
            xml "VERSION" "N/A"
        }
    } else {
        xml "VERSION" "N/A"
    }
    xml "CONFIG" "N/A"
    xml "SYSCTL" "N/A"
    $RET = ((Get-CimInstance Win32_OperatingSystem).OSArchitecture)
    if ($RET -ne "" -and $RET -ne $null -and $? -eq "True") {
        if ($RET -eq "32-bit") {
            xml "ARCH" "x86"
        } else {
            xml "ARCH" "x86_64"
        }
    } else {
        xml "ARCH" "N/A"
    }
    xml "CLOSE" "KERNEL"
} else {
    xml "OPEN" "NULL"
    xml "NONE" "Powershell is not installed or version is not compatible"
    xml "CLOSE" "NULL"
}
xml "CLOSE" "DATA"
echo "$BUF [POST-EOS]"
